import jwt from 'jsonwebtoken';
import { Request, Response, NextFunction } from 'express';

export interface AuthenticatedRequest extends Request {
    user: UserInformation | null;
    extendedUser: ExtendedUserInformation | null;
    token: string;
}


/**
 * Middleware function which can be used to secure endpoints needing authentication.
 * Note that the JWT_SECRET_KEY environment variable must be set.
 */
export const auth = async (req: Request, res: Response, next: NextFunction) => {
    try {
        const token = req.header('Authorization')?.replace('Bearer ', '');

        if (!token) {
            throw new Error();
        }

        const decoded = <JwtTokenProperties>jwt.verify(
            token,
            process.env.JWT_SECRET_KEY ?? ""
        );

        if (!decoded.isServiceToken) {
            // User information is only available when we this is not a service token
            (req as AuthenticatedRequest).user = new UserInformation(
                decoded._id!,
                decoded.name!,
                decoded.email!,
                decoded.cashbookId!
            );
        }

        (req as AuthenticatedRequest).token = token;

        next();
    } catch (err) {
        res.status(403).send({
            successful: false,
            message: "Please authenticate"
        });
    }
};


export class JwtTokenProperties {

    // Defines if this token is bound to a user or if it was generated by a 
    // microservice which wants to call other microservices.
    // The other properties may be null if the value of this field is 'null'.
    isServiceToken: boolean;

    _id: string | null;
    name: string | null;
    email: string | null;
    cashbookId: string | null;

    constructor(isServiceToken: boolean, id: string | null, name: string | null, email: string | null, cashbookId: string | null) {
        this.isServiceToken = isServiceToken;
        this._id = id;
        this.name = name;
        this.email = email;
        this.cashbookId = cashbookId;
    }
}

export class UserInformation {
    _id: string;
    name: string;
    email: string;
    cashbookId: string;

    constructor(id: string, name: string, email: string, cashbookId: string) {
        this._id = id;
        this.name = name;
        this.email = email;
        this.cashbookId = cashbookId;
    }
}

export class ExtendedUserInformation {
    _id: string;
    name: string;
    email: string;
    cashbookId: string;
    licenseType: string;
    tenantName: string;

    constructor(id: string, name: string, email: string, cashbookId: string, licenseType: string, tenantName: string) {
        this._id = id;
        this.name = name;
        this.email = email;
        this.cashbookId = cashbookId;
        this.licenseType = licenseType;
        this.tenantName = tenantName;
    }
}

export function getUserInformation(req: Request): UserInformation | null {
    if (req.hasOwnProperty("user")) {
        return (req as AuthenticatedRequest).user ?? null;
    }
    else {
        return null;
    }
}

export function getExtendedUserInformation(req: Request): ExtendedUserInformation | null {
    if (req.hasOwnProperty("extendedUser")) {
        return (req as AuthenticatedRequest).extendedUser ?? null;
    }
    else {
        return null;
    }
}

/**
 * This function extracts the original JWT token from the request headers. Use 
 * the token obtained from this function to call a foreign microservice
 */
export function getTokenOfInitialRequest(req: Request): string | null {
    if (req.hasOwnProperty("token")) {
        return (req as AuthenticatedRequest).token;
    }
    else {
        return null;
    }
}

/**
 * This function generates a new JWT token. Use this function when a call to a 
 * foreign microservice is needed and no other JWT or User is available.
 * 
 * If the call to the foreign service is initiated through another authenticated 
 * request use the original JWT token which can be obtained using the 
 * getTokenOfInitialRequest() function.
 * 
 * Note: The created token does not contain any user information like user id 
 * or cashbook id
 */
export function createServiceToken(): string {
    return jwt.sign(
        // See: https://stackoverflow.com/a/73075855/4563449
        JSON.parse(JSON.stringify(new JwtTokenProperties(
            true, null, null, null, null
        ))),
        process.env.JWT_SECRET_KEY ?? "",
        {
            expiresIn: '2 days',
        }
    );
}
